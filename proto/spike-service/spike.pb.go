// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spike-service/spike.proto

package spike

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Client struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Secret               string   `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2f0a75d579ddf6b, []int{0}
}

func (m *Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Client.Unmarshal(m, b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Client.Marshal(b, m, deterministic)
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return xxx_messageInfo_Client.Size(m)
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Client) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type GetSpikeTokenRequest struct {
	GrantType            string   `protobuf:"bytes,1,opt,name=grant_type,json=grantType,proto3" json:"grant_type,omitempty"`
	Audience             string   `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
	Client               *Client  `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSpikeTokenRequest) Reset()         { *m = GetSpikeTokenRequest{} }
func (m *GetSpikeTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetSpikeTokenRequest) ProtoMessage()    {}
func (*GetSpikeTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2f0a75d579ddf6b, []int{1}
}

func (m *GetSpikeTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSpikeTokenRequest.Unmarshal(m, b)
}
func (m *GetSpikeTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSpikeTokenRequest.Marshal(b, m, deterministic)
}
func (m *GetSpikeTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpikeTokenRequest.Merge(m, src)
}
func (m *GetSpikeTokenRequest) XXX_Size() int {
	return xxx_messageInfo_GetSpikeTokenRequest.Size(m)
}
func (m *GetSpikeTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpikeTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpikeTokenRequest proto.InternalMessageInfo

func (m *GetSpikeTokenRequest) GetGrantType() string {
	if m != nil {
		return m.GrantType
	}
	return ""
}

func (m *GetSpikeTokenRequest) GetAudience() string {
	if m != nil {
		return m.Audience
	}
	return ""
}

func (m *GetSpikeTokenRequest) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type SpikeToken struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpikeToken) Reset()         { *m = SpikeToken{} }
func (m *SpikeToken) String() string { return proto.CompactTextString(m) }
func (*SpikeToken) ProtoMessage()    {}
func (*SpikeToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2f0a75d579ddf6b, []int{2}
}

func (m *SpikeToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpikeToken.Unmarshal(m, b)
}
func (m *SpikeToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpikeToken.Marshal(b, m, deterministic)
}
func (m *SpikeToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpikeToken.Merge(m, src)
}
func (m *SpikeToken) XXX_Size() int {
	return xxx_messageInfo_SpikeToken.Size(m)
}
func (m *SpikeToken) XXX_DiscardUnknown() {
	xxx_messageInfo_SpikeToken.DiscardUnknown(m)
}

var xxx_messageInfo_SpikeToken proto.InternalMessageInfo

func (m *SpikeToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ValidateTokenRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Audience             string   `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateTokenRequest) Reset()         { *m = ValidateTokenRequest{} }
func (m *ValidateTokenRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateTokenRequest) ProtoMessage()    {}
func (*ValidateTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2f0a75d579ddf6b, []int{3}
}

func (m *ValidateTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateTokenRequest.Unmarshal(m, b)
}
func (m *ValidateTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateTokenRequest.Marshal(b, m, deterministic)
}
func (m *ValidateTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateTokenRequest.Merge(m, src)
}
func (m *ValidateTokenRequest) XXX_Size() int {
	return xxx_messageInfo_ValidateTokenRequest.Size(m)
}
func (m *ValidateTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateTokenRequest proto.InternalMessageInfo

func (m *ValidateTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ValidateTokenRequest) GetAudience() string {
	if m != nil {
		return m.Audience
	}
	return ""
}

type ValidateTokenResponse struct {
	Valid                bool     `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Scopes               []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateTokenResponse) Reset()         { *m = ValidateTokenResponse{} }
func (m *ValidateTokenResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateTokenResponse) ProtoMessage()    {}
func (*ValidateTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2f0a75d579ddf6b, []int{4}
}

func (m *ValidateTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateTokenResponse.Unmarshal(m, b)
}
func (m *ValidateTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateTokenResponse.Marshal(b, m, deterministic)
}
func (m *ValidateTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateTokenResponse.Merge(m, src)
}
func (m *ValidateTokenResponse) XXX_Size() int {
	return xxx_messageInfo_ValidateTokenResponse.Size(m)
}
func (m *ValidateTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateTokenResponse proto.InternalMessageInfo

func (m *ValidateTokenResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ValidateTokenResponse) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *ValidateTokenResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Client)(nil), "spike.Client")
	proto.RegisterType((*GetSpikeTokenRequest)(nil), "spike.GetSpikeTokenRequest")
	proto.RegisterType((*SpikeToken)(nil), "spike.SpikeToken")
	proto.RegisterType((*ValidateTokenRequest)(nil), "spike.ValidateTokenRequest")
	proto.RegisterType((*ValidateTokenResponse)(nil), "spike.ValidateTokenResponse")
}

func init() { proto.RegisterFile("spike-service/spike.proto", fileDescriptor_a2f0a75d579ddf6b) }

var fileDescriptor_a2f0a75d579ddf6b = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0x9b, 0x94, 0xe6, 0xdf, 0xcc, 0x9f, 0x08, 0x0e, 0x51, 0x62, 0x54, 0x08, 0x0b, 0x42,
	0x2f, 0x56, 0xa9, 0x9f, 0x40, 0x3c, 0xe8, 0xc1, 0x53, 0x2c, 0x5e, 0x4b, 0x4c, 0x86, 0xb2, 0xb4,
	0x26, 0x6b, 0x76, 0x5b, 0xec, 0x37, 0xf1, 0xe3, 0x4a, 0x26, 0x6b, 0x4b, 0x24, 0x78, 0xcb, 0x6f,
	0x5e, 0xf2, 0xe6, 0xcd, 0x23, 0x70, 0xa6, 0x95, 0x5c, 0xd1, 0xb5, 0xa6, 0x7a, 0x2b, 0x73, 0xba,
	0x61, 0x9a, 0xaa, 0xba, 0x32, 0x15, 0x8e, 0x18, 0xc4, 0x2d, 0x78, 0x0f, 0x6b, 0x49, 0xa5, 0xc1,
	0x23, 0x70, 0x65, 0x11, 0x39, 0x89, 0x33, 0xf1, 0x53, 0x57, 0x16, 0x78, 0x0a, 0x9e, 0xa6, 0xbc,
	0x26, 0x13, 0xb9, 0x3c, 0xb3, 0x24, 0x3e, 0x21, 0x7c, 0x24, 0xf3, 0xd2, 0x7c, 0x3d, 0xaf, 0x56,
	0x54, 0xa6, 0xf4, 0xb1, 0x21, 0x6d, 0xf0, 0x12, 0x60, 0x59, 0x67, 0xa5, 0x59, 0x98, 0x9d, 0x22,
	0xeb, 0xe3, 0xf3, 0x64, 0xbe, 0x53, 0x84, 0x31, 0x8c, 0xb3, 0x4d, 0x21, 0xa9, 0xcc, 0xc9, 0x1a,
	0xee, 0x19, 0xaf, 0xc0, 0xcb, 0x39, 0x44, 0x34, 0x4c, 0x9c, 0xc9, 0xff, 0x59, 0x30, 0x6d, 0x93,
	0xb6, 0xc9, 0x52, 0x2b, 0x0a, 0x01, 0x70, 0x58, 0x8b, 0x21, 0x8c, 0x4c, 0xf3, 0x60, 0x57, 0xb5,
	0x20, 0x9e, 0x20, 0x7c, 0xcd, 0xd6, 0xb2, 0xc8, 0x4c, 0x37, 0x5d, 0xef, 0xdb, 0x7f, 0x85, 0x12,
	0x0b, 0x38, 0xf9, 0xe5, 0xa4, 0x55, 0x55, 0x6a, 0x6a, 0xac, 0xb6, 0x8d, 0xc0, 0x56, 0xe3, 0xb4,
	0x05, 0xae, 0x2b, 0xaf, 0x14, 0xe9, 0xc8, 0x4d, 0x86, 0x5c, 0x17, 0x13, 0x46, 0xf0, 0xef, 0x9d,
	0xb4, 0xce, 0x96, 0xc4, 0xc7, 0xf9, 0xe9, 0x0f, 0xce, 0xbe, 0x1c, 0x18, 0xf1, 0x3d, 0x78, 0x0f,
	0x41, 0xa7, 0x52, 0x3c, 0xb7, 0x05, 0xf4, 0x15, 0x1d, 0x1f, 0x5b, 0xf1, 0xa0, 0x88, 0x01, 0x3e,
	0x43, 0xd0, 0x49, 0xbb, 0xb7, 0xe8, 0x6b, 0x23, 0xbe, 0xe8, 0x17, 0xdb, 0x03, 0xc5, 0xe0, 0xcd,
	0xe3, 0x7f, 0xe4, 0xee, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x40, 0xf9, 0x88, 0x88, 0x40, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpikeClient is the client API for Spike service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpikeClient interface {
	GetSpikeToken(ctx context.Context, in *GetSpikeTokenRequest, opts ...grpc.CallOption) (*SpikeToken, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
}

type spikeClient struct {
	cc *grpc.ClientConn
}

func NewSpikeClient(cc *grpc.ClientConn) SpikeClient {
	return &spikeClient{cc}
}

func (c *spikeClient) GetSpikeToken(ctx context.Context, in *GetSpikeTokenRequest, opts ...grpc.CallOption) (*SpikeToken, error) {
	out := new(SpikeToken)
	err := c.cc.Invoke(ctx, "/spike.Spike/GetSpikeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spikeClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, "/spike.Spike/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpikeServer is the server API for Spike service.
type SpikeServer interface {
	GetSpikeToken(context.Context, *GetSpikeTokenRequest) (*SpikeToken, error)
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
}

// UnimplementedSpikeServer can be embedded to have forward compatible implementations.
type UnimplementedSpikeServer struct {
}

func (*UnimplementedSpikeServer) GetSpikeToken(ctx context.Context, req *GetSpikeTokenRequest) (*SpikeToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpikeToken not implemented")
}
func (*UnimplementedSpikeServer) ValidateToken(ctx context.Context, req *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}

func RegisterSpikeServer(s *grpc.Server, srv SpikeServer) {
	s.RegisterService(&_Spike_serviceDesc, srv)
}

func _Spike_GetSpikeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpikeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpikeServer).GetSpikeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spike.Spike/GetSpikeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpikeServer).GetSpikeToken(ctx, req.(*GetSpikeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spike_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpikeServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spike.Spike/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpikeServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Spike_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spike.Spike",
	HandlerType: (*SpikeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpikeToken",
			Handler:    _Spike_GetSpikeToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Spike_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spike-service/spike.proto",
}
